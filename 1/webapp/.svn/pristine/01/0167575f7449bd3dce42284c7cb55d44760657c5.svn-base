/**
 * 根路径
 */
var strFullPath = window.document.location.href;
var strPath = window.document.location.pathname;
var pos = strFullPath.indexOf(strPath);
var prePath = strFullPath.substring(0, pos);
var postPath = strPath.substring(0, strPath.substr(0).indexOf('/') + 1);
var basePath = prePath + postPath ;
//var basePath = 'http://192.168.1.112:8080/';

$("#logo").click(function() {
	window.location = basePath;
})

$("#home-btn").click(function() {
	if ($(this).hasClass("disabled")) {
		return false;
	}
	if ($("#home").css("display") == "none") {
		init();
		$("#user").css("display", "none");
		$("#activity").css("display", "none");
		$("#system").css("display", "none");
		$("#company").css("display", "none");
		clearInterval(timers);
		timers = null;
	} else {
		return false;
	}
})
function init() {
	$("#home").show();
	userMapList();
	userActList();
	userMonthList();
	userHtmlList();
	sysInfo();
	actLiftList();
}
$("#user-btn").click(function() {
	if ($(this).hasClass("disabled")) {
		return false;
	}
	if ($("#user").css("display") == "none") {
		$("#user").show();
        userInit();
		$("#home").css("display", "none");
		$("#activity").css("display", "none");
		$("#system").css("display", "none");
		$("#company").css("display", "none");
	} else {
		return false;
	}
	//x = $('#user-scroll-list');
	//scrollText();
})
$("#activity-btn").click(function() {
	if ($(this).hasClass("disabled")) {
		return false;
	}
	if ($("#activity").css("display") == "none") {
		$("#activity").show();
		$("#home").css("display", "none");
		$("#user").css("display", "none");
		$("#system").css("display", "none");
		$("#company").css("display", "none");
	} else {
		return false;
	}
	clearInterval(timers);
	timers = null;
	x = $("#activity-scroll-list");
	scrollText();
})
$("#system-btn").click(function() {
	if ($(this).hasClass("disabled")) {
		return false;
	}
	if ($("#system").css("display") == "none") {
		$("#system").show();
		$("#home").css("display", "none");
		$("#user").css("display", "none");
		$("#activity").css("display", "none");
		$("#company").css("display", "none");
		if (null == websocket) {
			realTimeLog();
		}
	} else {
		return false;
	}
})
$("#company-btn").click(function() {
	if ($(this).hasClass("disabled")) {
		return false;
	}
	if ($("#company").css("display") == "none") {
		$("#company").show();
		companyInit();		
		//websocket.close();
		$("#home").css("display", "none");
		$("#user").css("display", "none");
		$("#activity").css("display", "none");
		$("#system").css("display", "none");
	} else {
		return false;
	}
})


var timers;
/**
 * 文字滚动方法
 */
function scrollText() {
	var xx = $(x).children().toArray()[0];
	$(x).children().toArray()[$(x).children().length - 1] = xx;
	$($(x)).append(xx);
	if (!timers) {
		setTimeout(4000);
		timers = setInterval(scrollText, 2000);
	}
}
/**
 * 自定义AJAX方法 参数为基础参数(url、type、datatype、data、success方法、error方法)
 * 以上参数默认值为：url(必传参数),post,json,'',return,return. 如需要其他参数，请商议后添加
 */
(function($) {
	$.myAjax = function(ajaxData) {
		var url = ajaxData.url, type = (ajaxData.type == null
				|| ajaxData.type == "" || typeof (ajaxData.type) == "undefined") ? "post"
				: ajaxData.type, dataType = (ajaxData.dataType == null
				|| ajaxData.dataType == "" || typeof (ajaxData.dataType) == "undefined") ? "json"
				: ajaxData.dataType, data = (ajaxData.data == null
				|| ajaxData.data == "" || typeof (ajaxData.data) == "undefined") ? ''
				: ajaxData.data, async = (ajaxData.async == null
				|| ajaxData.async == "" || typeof (ajaxData.async) == "undefined") ? true
				: ajaxData.async, successfn = (ajaxData.success == null
				|| ajaxData.success == "" || typeof (ajaxData.success) == "undefined") ? function() {
		}
				: ajaxData.success, errorfn = (ajaxData.error == null
				|| ajaxData.error == "" || typeof (ajaxData.error) == "undefined") ? function() {
		}
				: ajaxData.error;

		$.ajax({
			url : url,
			data : data,
			type : type,
			dataType : dataType,
			async : async,
			xhrFields : { // 解决跨域session不一致问题，上线删除，只开发使用
				withCredentials : true
			},
			crossDomain : true,
			success : function(result) {
				successfn(result);
			},
			error : function(result) {
				errorfn(result);
			}
		});
	}
})(jQuery);

/**
 * 鼠标拖拽调整窗口大小
 * 
 * @param el
 */
function mouseAdjustElementSize(el){
	// 初始化参数
	var els = el.style,
	// 鼠标的 X 和 Y 轴坐标
	x = y = 0;
	$(el).mousedown(function (e){
		// 按下元素后，计算当前鼠标与对象计算后的坐标
		x = e.clientX - el.offsetWidth,
		y = e.clientY - el.offsetHeight;
		// 在支持 setCapture 做些东东
		el.setCapture ? (
			// 捕捉焦点
			el.setCapture(),
			// 设置事件
			el.onmousemove = function (ev){
				mouseMove(ev || event);
			},
			el.onmouseup = mouseUp
		) : (
			// 绑定事件
			$(document).bind("mousemove", mouseMove).bind("mouseup", mouseUp)
		);
		// 防止默认事件发生
		e.preventDefault();
	});
	// 移动事件
	function mouseMove(e){
		els.width = e.clientX - x + 'px',
		els.height = e.clientY - y + 'px';
	}
	// 停止事件
	function mouseUp(){
		// 在支持 releaseCapture 做些东东
		el.releaseCapture ? (
			// 释放焦点
			el.releaseCapture(),
			// 移除事件
			el.onmousemove = el.onmouseup = null
		) : (
			// 卸载事件
			$(document).unbind("mousemove", mouseMove).unbind("mouseup", mouseUp)
		);
	}
}